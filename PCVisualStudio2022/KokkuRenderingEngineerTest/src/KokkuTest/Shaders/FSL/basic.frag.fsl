/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/
#include "resources.h.fsl"

RES(Tex2D(float4), Albedo1,  UPDATE_FREQ_NONE, t7, binding = 8);
RES(Tex2D(float4), Bump1,  UPDATE_FREQ_NONE, t8, binding = 9);
RES(Tex2D(float4), Albedo2,  UPDATE_FREQ_NONE, t9, binding = 10);
RES(Tex2D(float4), Bump2,  UPDATE_FREQ_NONE, t10, binding = 11);
RES(Tex2D(float4), Albedo3,  UPDATE_FREQ_NONE, t11, binding = 12);
RES(Tex2D(float4), Bump3,  UPDATE_FREQ_NONE, t12, binding = 13);
RES(Buffer(uint), submeshSizes, UPDATE_FREQ_NONE, t13, binding = 14);
RES(SamplerState,  uSampler1, UPDATE_FREQ_NONE, s1, binding = 15);
// Shader for simple shading with a point light
// for planets in Unit Test 12 - Transformations

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float3, Normal,    NORMAL);
	DATA(float2, uv,	 TEXCOORD0);
};

float3 BumpNormal(float3 _normal, float _bumpVal) {
    // Calculate tangent and bitangent vectors
    float3 tangent = normalize(cross(_normal, float3(0.0, 1.0, 0.0)));
    float3 bitangent = cross(_normal, tangent);

    // Perturb the normal
    _normal += tangent * (_bumpVal - 0.5) * 2.0;
    _normal += bitangent * (_bumpVal - 0.5) * 2.0;

    return normalize(_normal);
}

float4 PS_MAIN(VSOutput In, SV_PrimitiveID(uint) primitiveID)
{
    INIT_MAIN;

    float4 result;
    float4 albedoColor;
    float bumpValue;
    float lightIntensity = 0.05;

    float3 lightPos = normalize(float3(-0.5, -0.5, -0.5));

    float3 bumpNormal;
    float lightIncidence;

    float3 lightColor = float3(1.0, 1.0, 1.0) * lightIntensity;

    if(primitiveID < Get(submeshSizes)[0])
    {
        albedoColor = SampleTex2D(Get(Albedo1), Get(uSampler1), In.uv);      
        bumpValue = SampleTex2D(Get(Bump1), Get(uSampler1), In.uv).r;  
    }
    else if(primitiveID < Get(submeshSizes)[1])
    {
        albedoColor = SampleTex2D(Get(Albedo2), Get(uSampler1), In.uv); 
        bumpValue = SampleTex2D(Get(Bump2), Get(uSampler1), In.uv).r;       
    }
    else if(primitiveID < Get(submeshSizes)[2])
    {
        albedoColor = SampleTex2D(Get(Albedo3), Get(uSampler1), In.uv);  
        bumpValue = SampleTex2D(Get(Bump3), Get(uSampler1), In.uv).r;
    }
    else
    {
        albedoColor = SampleTex2D(Get(Albedo2), Get(uSampler1), In.uv);  
        bumpValue = SampleTex2D(Get(Bump1), Get(uSampler1), In.uv).r;
    }

    bumpNormal = BumpNormal(normalize(In.Normal), bumpValue);
    lightIncidence = max(dot(bumpNormal, lightPos), 0.0);

    result = albedoColor + float4((lightColor * lightIncidence * lightIncidence), 1.0);

    RETURN(result);
}
